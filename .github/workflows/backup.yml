name: GitVault

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get commit hash
      id: commit
      run: echo "hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

    - name: Create tarball of entire repo
      id: archive
      run: |
        TAR_PATH="/tmp/repo.tar.gz"
        tar --exclude='.git' --exclude='*.tar.gz' -czf "$TAR_PATH" .
        echo "path=$TAR_PATH" >> $GITHUB_OUTPUT
        echo "size=$(stat -c%s "$TAR_PATH")" >> $GITHUB_OUTPUT

    - name: Upload to Supabase
      id: upload
      env:
        API_URL: "https://b9972f91cc25.ngrok-free.app/api/my-upload/upload"
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üîÑ Uploading archive to $API_URL..."

        RESPONSE=$(curl -s -X POST "$API_URL" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "X-GitHub-Repository: $GITHUB_REPOSITORY" \
          -H "X-GitHub-Commit-Hash: ${{ steps.commit.outputs.hash }}" \
          -H "X-GitHub-Run-Id: $GITHUB_RUN_ID" \
          -F "file=@${{ steps.archive.outputs.path }}")

        echo "üì¶ Upload response: $RESPONSE"

        SUPA_KEY=$(echo "$RESPONSE" | jq -r '.supabaseKey')
        SIGNED_URL=$(echo "$RESPONSE" | jq -r '.signedUrl')

        if [[ -z "$SUPA_KEY" || "$SUPA_KEY" == "null" ]]; then
          echo "‚ùå Upload failed: No supabaseKey"
          exit 1
        fi

        echo "supabaseKey=$SUPA_KEY" >> $GITHUB_OUTPUT
        echo "signedUrl=$SIGNED_URL" >> $GITHUB_OUTPUT

    - name: üöÄ Trigger Storacha Upload on Server
      id: storacha
      env:
        SERVER_URL: "https://b9972f91cc25.ngrok-free.app/api/my-upload/storacha-upload"
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üîÅ Calling server to pull from Supabase and upload to Storacha..."

        JSON=$(jq -n \
          --arg repo "${GITHUB_REPOSITORY}" \
          --arg commit "${{ steps.commit.outputs.hash }}" \
          --arg supa "${{ steps.upload.outputs.supabaseKey }}" \
          --arg url "${{ steps.upload.outputs.signedUrl }}" \
          '{repo: $repo, commit: $commit, supabaseKey: $supa, signedUrl: $url}')

        RESPONSE=$(curl -s -X POST "$SERVER_URL" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -d "$JSON")

        echo "üåê Storacha response: $RESPONSE"

        CID=$(echo "$RESPONSE" | jq -r '.cid')
        IPFS_URL=$(echo "$RESPONSE" | jq -r '.url')

        if [[ "$CID" == "null" || -z "$CID" ]]; then
          echo "‚ùå Failed to retrieve CID"
          exit 1
        fi

        echo "cid=$CID" >> $GITHUB_OUTPUT
        echo "ipfs_url=$IPFS_URL" >> $GITHUB_OUTPUT

    - name: Debug Confirm key being deleted
      run: |
        echo "üßπ Key that will be deleted: ${{ steps.upload.outputs.supabaseKey }}"

    - name: üóëÔ∏è Delete temp from Supabase
      if: always()
      env:
        DELETE_URL: "https://b9972f91cc25.ngrok-free.app/api/my-upload/delete"
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üßπ Cleaning up Supabase temp file..."

        JSON=$(jq -n \
          --arg key "${{ steps.upload.outputs.supabaseKey }}" \
          --arg repo "${{ github.repository }}" \
          '{key: $key, repo: $repo}')

        RESPONSE=$(curl -s -w "%{http_code}" -o response.json -X POST "$DELETE_URL" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -d "$JSON")

        HTTP_CODE=$(tail -n1 <<< "$RESPONSE")
        BODY=$(cat response.json)

        echo "üîÅ HTTP $HTTP_CODE"
        echo "üì© Response body: $BODY"

        if [[ "$HTTP_CODE" -ne 200 ]]; then
          echo "‚ùå Deletion failed with HTTP $HTTP_CODE"
          exit 1
        fi

    - name: Update .gitvault and README
      if: success()
      run: |
        CID=${{ steps.storacha.outputs.cid }}
        URL=${{ steps.storacha.outputs.ipfs_url }}

        if [ ! -f .gitvault ]; then
          echo "repository:" > .gitvault
          echo "  name: $GITHUB_REPOSITORY" >> .gitvault
          echo "backups:" >> .gitvault
        fi

        echo "- cid: $CID" >> .gitvault
        echo "  date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> .gitvault
        echo "  commit: ${{ steps.commit.outputs.hash }}" >> .gitvault

        if [ -f README.md ]; then
          sed -i '/\[!\[GitVault Backup/d' README.md
          sed -i "1i [![GitVault Backup](https://img.shields.io/badge/GitVault-Protected-blue)]($URL)" README.md
        else
          echo "[![GitVault Backup](https://img.shields.io/badge/GitVault-Protected-blue)]($URL)" > README.md
        fi

        git config user.name "GitVault Bot"
        git config user.email "bot@gitvault.xyz"
        git fetch origin main
        git reset --hard origin/main
        git add .gitvault README.md
        git commit -m "Update GitVault backup [skip ci]" || echo "‚úÖ Nothing to commit"
        git push origin main
