name: GitVault

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit hash
        id: commit
        run: echo "hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Create tarball of entire repo
        id: archive
        run: |
          mkdir -p backup-temp
          TAR_PATH="backup-temp/repo.tar.gz"
          tar --exclude='.git' -czf "$TAR_PATH" .
          echo "path=$TAR_PATH" >> $GITHUB_OUTPUT
          echo "size=$(stat -c%s "$TAR_PATH")" >> $GITHUB_OUTPUT

      - name: Upload to local API
        id: upload
        env:
          API_URL: "http://localhost:3000/api/my-upload/upload"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "ðŸ”„ Uploading archive to $API_URL..."

          RESPONSE=$(curl -s -X POST "$API_URL" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Repository: $GITHUB_REPOSITORY" \
            -H "X-GitHub-Commit-Hash: ${{ steps.commit.outputs.hash }}" \
            -H "X-GitHub-Run-Id: $GITHUB_RUN_ID" \
            -H "X-Backup-Owner: ${{ github.repository_owner }}" \
            -F "file=@${{ steps.archive.outputs.path }}" \
            --retry 3 --retry-delay 2)

          echo "ðŸ“¦ Upload response: $RESPONSE"

          CID=$(echo "$RESPONSE" | jq -r '.cid')
          if [[ -z "$CID" || "$CID" == "null" ]]; then
            echo "Upload failed or no CID received"
            exit 1
          fi

          echo "cid=$CID" >> $GITHUB_OUTPUT

      - name: Update .gitvault and README
        if: success()
        run: |
          if [ ! -f .gitvault ]; then
            echo "repository:" > .gitvault
            echo "  name: $GITHUB_REPOSITORY" >> .gitvault
            echo "backups:" >> .gitvault
          fi

          echo "- cid: ${{ steps.upload.outputs.cid }}" >> .gitvault
          echo "  date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> .gitvault
          echo "  commit: ${{ steps.commit.outputs.hash }}" >> .gitvault

          if [ -f README.md ]; then
            sed -i '/\[!\[GitVault Backup/d' README.md
            sed -i "1i [![GitVault Backup](https://img.shields.io/badge/GitVault-Protected-blue)](https://ipfs.io/ipfs/${{ steps.upload.outputs.cid }})" README.md
          else
            echo "[![GitVault Backup](https://img.shields.io/badge/GitVault-Protected-blue)](https://ipfs.io/ipfs/${{ steps.upload.outputs.cid }})" > README.md
          fi

          git config user.name "GitVault Bot"
          git config user.email "bot@gitvault.xyz"
          git add .gitvault README.md
          git commit -m "Update GitVault backup [skip ci]" || true
          git push
