name: GitVault

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get commit hash
      id: commit
      run: echo "hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

    - name: Create tarball of entire repo
      id: archive
      run: |
        TAR_PATH="/tmp/repo.tar.gz"
        tar --exclude='.git' --exclude='*.tar.gz' -czf "$TAR_PATH" .
        echo "path=$TAR_PATH" >> $GITHUB_OUTPUT
        echo "size=$(stat -c%s "$TAR_PATH")" >> $GITHUB_OUTPUT

    - name: Upload to Supabase
      id: upload
      env:
        API_URL: "https://f64e-2409-40d0-2023-be3c-c5ae-5798-71ef-c4ae.ngrok-free.app/api/my-upload/upload"
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🔄 Uploading archive to $API_URL..."

        RESPONSE=$(curl -s -X POST "$API_URL" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "X-GitHub-Repository: $GITHUB_REPOSITORY" \
          -H "X-GitHub-Commit-Hash: ${{ steps.commit.outputs.hash }}" \
          -H "X-GitHub-Run-Id: $GITHUB_RUN_ID" \
          -H "X-Backup-Owner: ${{ github.repository_owner }}" \
          -F "file=@${{ steps.archive.outputs.path }}" \
          --retry 3 --retry-delay 2)

        echo "📦 Upload response: $RESPONSE"

        SUPA_KEY=$(echo "$RESPONSE" | jq -r '.supabaseKey')
        SIGNED_URL=$(echo "$RESPONSE" | jq -r '.signedUrl')

        if [[ -z "$SUPA_KEY" || "$SUPA_KEY" == "null" ]]; then
          echo "❌ Upload failed: No supabaseKey"
          exit 1
        fi

        echo "supabaseKey=$SUPA_KEY" >> $GITHUB_OUTPUT
        echo "signedUrl=$SIGNED_URL" >> $GITHUB_OUTPUT

    - name: Generate HMAC Signature
      id: hmac
      env:
        HMAC_SECRET: ${{ secrets.HMAC_SECRET }}
      run: |
        REPO_COMMIT="${GITHUB_REPOSITORY}:${{ steps.commit.outputs.hash }}"
        SIG=$(echo -n "$REPO_COMMIT" | openssl dgst -sha256 -hmac "$HMAC_SECRET" | sed 's/^.* //')
        echo "sig=$SIG"
        echo "sig=$SIG" >> $GITHUB_OUTPUT

    - name: 🚀 Trigger Storacha Upload on Server
      if: ${{ success() }}
      env:
        SERVER_URL: "https://f64e-2409-40d0-2023-be3c-c5ae-5798-71ef-c4ae.ngrok-free.app/api/my-upload/storacha-upload"
        AUTH_TOKEN: ${{ secrets.STORACHA_TRIGGER_SECRET }}
      run: |
        echo "🔁 Calling server to pull from Supabase and upload to Storacha..."

        JSON=$(jq -n \
          --arg repo "${GITHUB_REPOSITORY}" \
          --arg commit "${{ steps.commit.outputs.hash }}" \
          --arg supa "${{ steps.upload.outputs.supabaseKey }}" \
          --arg url "${{ steps.upload.outputs.signedUrl }}" \
          --arg sig "${{ steps.hmac.outputs.sig }}" \
          '{repo: $repo, commit: $commit, supabaseKey: $supa, signedUrl: $url, sig: $sig}')

        curl -X POST "$SERVER_URL" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $AUTH_TOKEN" \
          -d "$JSON"

    - name: Update .gitvault and README
      if: success()
      run: |
        if [ ! -f .gitvault ]; then
          echo "repository:" > .gitvault
          echo "  name: $GITHUB_REPOSITORY" >> .gitvault
          echo "backups:" >> .gitvault
        fi

        echo "- cid: PLACEHOLDER_CID" >> .gitvault
        echo "  date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> .gitvault
        echo "  commit: ${{ steps.commit.outputs.hash }}" >> .gitvault

        if [ -f README.md ]; then
          sed -i '/\[!\[GitVault Backup/d' README.md
          sed -i "1i [![GitVault Backup](https://img.shields.io/badge/GitVault-Protected-blue)](https://ipfs.io/ipfs/PLACEHOLDER_CID)" README.md
        else
          echo "[![GitVault Backup](https://img.shields.io/badge/GitVault-Protected-blue)](https://ipfs.io/ipfs/PLACEHOLDER_CID)" > README.md
        fi

        git config user.name "GitVault Bot"
        git config user.email "bot@gitvault.xyz"
        git pull --rebase origin main || true
        git add .gitvault README.md
        git commit -m "Update GitVault backup [skip ci]" || true
        git push
