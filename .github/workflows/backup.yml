name: GitVault

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get commit hash
      id: commit
      run: echo "hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

    - name: Generate dummy data (~40MB for test)
      run: |
        mkdir -p dummy_data
        for i in {1..20}; do
          dd if=/dev/zero of="dummy_data/file_$i.bin" bs=100M count=1 status=none
        done

    - name: Create tarball of entire repo
      id: archive
      run: |
        TAR_PATH="/tmp/repo.tar.gz"
        echo "📦 Creating tarball (excluding .git and other tar files)..."
        tar --exclude='.git' --exclude='*.tar.gz' -czf "$TAR_PATH" .
        SIZE_BYTES=$(stat -c%s "$TAR_PATH")
        SIZE_MB=$((SIZE_BYTES / 1024 / 1024))
        echo "✅ Tarball created at $TAR_PATH"
        echo "📏 Tarball size: ${SIZE_MB} MB"
        echo "path=$TAR_PATH" >> $GITHUB_OUTPUT
        echo "size=$SIZE_BYTES" >> $GITHUB_OUTPUT

    - name: Upload to Storacha (w3up)
      id: storacha
      env:
        SERVER_URL: "https://326d22fcdd6d.ngrok-free.app/api/ci-upload/storacha-upload"
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🚀 Uploading to Storacha..."
        RESPONSE=$(curl -s -X POST "$SERVER_URL" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -F "repo=${GITHUB_REPOSITORY}" \
          -F "commit=${{ steps.commit.outputs.hash }}" \
          -F "file=@${{ steps.archive.outputs.path }}")

        echo "$RESPONSE"

        CID=$(echo "$RESPONSE" | jq -r '.cid')
        IPFS_URL=$(echo "$RESPONSE" | jq -r '.url')

        if [[ "$CID" == "null" || -z "$CID" ]]; then
          echo "❌ Upload failed. No CID returned."
          exit 1
        fi

        echo "cid=$CID" >> $GITHUB_OUTPUT
        echo "ipfs_url=$IPFS_URL" >> $GITHUB_OUTPUT

    - name: Update .gitvault and README
      if: success()
      run: |
        CID=${{ steps.storacha.outputs.cid }}
        URL=${{ steps.storacha.outputs.ipfs_url }}

        if [ ! -f .gitvault ]; then
          echo "repository:" > .gitvault
          echo "  name: $GITHUB_REPOSITORY" >> .gitvault
          echo "backups:" >> .gitvault
        fi

        echo "- cid: $CID" >> .gitvault
        echo "  date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> .gitvault
        echo "  commit: ${{ steps.commit.outputs.hash }}" >> .gitvault

        if [ -f README.md ]; then
          sed -i '/\[!\[GitVault Backup/d' README.md
          sed -i "1i [![GitVault Backup](https://img.shields.io/badge/GitVault-Protected-blue)]($URL)" README.md
        else
          echo "[![GitVault Backup](https://img.shields.io/badge/GitVault-Protected-blue)]($URL)" > README.md
        fi

        git config user.name "GitVault Bot"
        git config user.email "bot@gitvault.xyz"
        git fetch origin main
        git reset --hard origin/main
        git add .gitvault README.md
        git commit -m "Update GitVault backup [skip ci]" || true
        git push origin main
